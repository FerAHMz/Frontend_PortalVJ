---
name: Frontend PortalVJ CI/CD Pipeline

"on":
  push:
    branches: [main, develop, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18.x'

jobs:
  # ==============================
  # FRONTEND CI
  # ==============================
  frontend-test:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run frontend tests
        run: npm test
        env:
          CI: true

      - name: Upload frontend test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-coverage
          path: coverage/

  # ==============================
  # SECURITY & QUALITY CHECKS
  # ==============================
  frontend-security:
    name: Security & Quality Audit
    runs-on: ubuntu-latest
    needs: [frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: npm outdated || true

  # ==============================
  # BUILD & QUALITY
  # ==============================
  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 30

  # ==============================
  # DOCKER BUILD
  # ==============================
  frontend-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-build]
    if: >
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (Production only)
        if: >
          github.ref == 'refs/heads/main' ||
          github.ref == 'refs/heads/master'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image (test)
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: portalvj-frontend:test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (production)
        if: >
          github.ref == 'refs/heads/main' ||
          github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/portalvj-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/portalvj-frontend:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=PortalVJ Frontend
            org.opencontainers.image.description=Frontend UI for PortalVJ
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{
              github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==============================
  # E2E TESTS
  # ==============================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Start frontend server
        run: |
          npm run preview &
          sleep 10

      - name: Run Cypress E2E tests
        run: npm run test:e2e:headless
        env:
          CYPRESS_baseUrl: http://localhost:4173

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos/

  # ==============================
  # LIGHTHOUSE PERFORMANCE
  # ==============================
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [frontend-build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Run Lighthouse CI
        run: npm run lighthouse
        continue-on-error: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/

  # ==============================
  # DEPLOYMENT
  # ==============================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-security, frontend-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: dist/

      - name: Deploy frontend to staging
        run: |
          echo "ðŸš€ Deploying frontend to staging environment..."
          echo "Environment: Staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          # AquÃ­ irÃ­an los comandos especÃ­ficos de deployment
          # Ejemplos segÃºn tu proveedor:

          # Para Netlify:
          # npx netlify-cli deploy --dir=dist --site=$NETLIFY_SITE_ID \
          #   --auth=$NETLIFY_AUTH_TOKEN

          # Para Vercel:
          # npx vercel --token $VERCEL_TOKEN --prod

          # Para GitHub Pages:
          # npm run deploy

          # Para Firebase Hosting:
          # npx firebase deploy --token $FIREBASE_TOKEN

          # Para AWS S3 + CloudFront:
          # aws s3 sync dist/ s3://$S3_BUCKET --delete
          # aws cloudfront create-invalidation \
          #   --distribution-id $CLOUDFRONT_ID --paths "/*"

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging deployment..."
          sleep 15

          # Ejemplo de smoke test
          # curl -f $STAGING_FRONTEND_URL || exit 1
          # curl -f $STAGING_FRONTEND_URL/favicon.ico || exit 1

      - name: Notify staging deployment
        run: |
          echo "âœ… Frontend staging deployment completed!"
          echo "Staging URL: https://your-frontend-staging.netlify.app"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-security, frontend-build, frontend-docker]
    if: >
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: dist/

      - name: Deploy frontend to production
        run: |
          echo "ðŸš€ Deploying frontend to production environment..."
          echo "Environment: Production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          # Comandos de deployment para producciÃ³n

      - name: Run production smoke tests
        run: |
          echo "Running smoke tests on production deployment..."
          sleep 15

          # Smoke tests para producciÃ³n
          # curl -f $PRODUCTION_FRONTEND_URL || exit 1

      - name: Notify production deployment
        run: |
          echo "âœ… Frontend production deployment completed!"
          echo "Production URL: https://your-frontend-prod.netlify.app"

          # Opcional: Enviar notificaciÃ³n
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"ðŸš€ Frontend PortalVJ deployed!"}' \
          #   $SLACK_WEBHOOK_URL
